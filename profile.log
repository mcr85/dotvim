FUNCTION  <SNR>70_Highlight_Matching_Pair()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:40
Called 46 times
Total time:   0.003733
 Self time:   0.003238

count  total (s)   self (s)
                              " Remove any previous match.
   46   0.000776   0.000281   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
   46              0.000156   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
   46              0.000015   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
   46              0.000110   let c_lnum = line('.')
   46              0.000071   let c_col = col('.')
   46              0.000047   let before = 0
                            
   46              0.000089   let text = getline(c_lnum)
   46              0.000499   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
   46              0.000082   if empty(matches)
                                let [c_before, c] = ['', '']
   46              0.000025   else
   46              0.000129     let [c_before, c] = matches[1:2]
   46              0.000018   endif
   46              0.000396   let plist = split(&matchpairs, '.\zs[:,]')
   46              0.000098   let i = index(plist, c)
   46              0.000037   if i < 0
                                " not found, in Insert mode try character before the cursor
   43              0.000128     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
   43              0.000016     endif
   43              0.000030     if i < 0
                                  " not found, nothing to do
   43              0.000029       return
                                endif
    3              0.000001   endif
                            
                              " Figure out the arguments for searchpairpos().
    3              0.000002   if i % 2 == 0
    1              0.000001     let s_flags = 'nW'
    1              0.000002     let c2 = plist[i + 1]
    2              0.000001   else
    2              0.000002     let s_flags = 'nbW'
    2              0.000002     let c2 = c
    2              0.000003     let c = plist[i - 1]
    3              0.000001   endif
    3              0.000003   if c == '['
    1              0.000001     let c = '\['
    1              0.000001     let c2 = '\]'
    3              0.000001   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    3              0.000002   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
    3              0.000001   endif
                            
    3              0.000011   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    3              0.000001   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
    3              0.000008     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    3              0.000002     try
    3              0.000033       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    3              0.000002     endtry
    3              0.000001   endif
                            
                              " Limit the search to lines visible in the window.
    3              0.000009   let stoplinebottom = line('w$')
    3              0.000004   let stoplinetop = line('w0')
    3              0.000003   if i % 2 == 0
    1              0.000001     let stopline = stoplinebottom
    2              0.000001   else
    2              0.000003     let stopline = stoplinetop
    3              0.000001   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    3              0.000006   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    3              0.000001   else
    3              0.000008     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    3              0.000001   endif
    3              0.000001   try
    3              0.000189     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    3              0.000001   endtry
                            
    3              0.000003   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
    3              0.000001   endif
                            
                              " If a match is found setup match highlighting.
    3              0.000006   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
    3              0.000005     if exists('*matchaddpos')
    3              0.000015       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
    3              0.000001     endif
    3              0.000003     let w:paren_hl_on = 1
    3              0.000001   endif

FUNCTION  <SNR>70_Remove_Matches()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:197
Called 46 times
Total time:   0.000496
 Self time:   0.000496

count  total (s)   self (s)
   46              0.000268   if exists('w:paren_hl_on') && w:paren_hl_on
    3              0.000009     silent! call matchdelete(3)
    3              0.000007     let w:paren_hl_on = 0
   46              0.000053   endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   46   0.003733   0.003238  <SNR>70_Highlight_Matching_Pair()
   46   0.000496             <SNR>70_Remove_Matches()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
   46   0.003733   0.003238  <SNR>70_Highlight_Matching_Pair()
   46              0.000496  <SNR>70_Remove_Matches()

